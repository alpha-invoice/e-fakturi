{"version":3,"file":"invoice-list.component.js","sourceRoot":"","sources":["file:///C:/Users/stefanterziyski/workspace/workspaceJEE/Invoices_frontend/invoices-frontend/tmp/broccoli_type_script_compiler-input_base_path-9BF65skb.tmp/0/src/app/components/invoice-list.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAgC,eAAe,CAAC,CAAA;AAEhD,gCAA6B,6BAA6B,CAAC,CAAA;AAC3D,kCAA+B,qBAAqB,CAAC,CAAA;AACrD,uBAAgC,iBAAiB,CAAC,CAAA;AAElD;;;;;GAKG;AAOH;IAGE,8BAAoB,eAA8B;QAA9B,oBAAe,GAAf,eAAe,CAAe;IAClD,CAAC;IAED;;;;OAIG;IACH,uCAAQ,GAAR;QAAA,iBAIC;QAHC,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE;aACb,IAAI,CAAC,UAAA,QAAQ,IAAE,OAAA,KAAI,CAAC,QAAQ,GAAC,QAAQ,EAAtB,CAAsB,CAAC;aACtC,KAAK,CAAC,UAAA,KAAK,IAAE,OAAA,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAApB,CAAoB,CAAC,CAAC;IAC1D,CAAC;IArBH;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,cAAc;YACxB,WAAW,EAAE,uCAAuC;YACpD,SAAS,EAAE,CAAC,gCAAc,CAAC;YAC3B,UAAU,EAAE,CAAC,0BAAiB,EAAC,oCAAgB,CAAC;SACjD,CAAC;;4BAAA;IAiBF,2BAAC;AAAD,CAAC,AAhBD,IAgBC;AAhBY,4BAAoB,uBAgBhC,CAAA","sourcesContent":["import {Component, OnInit} from \"@angular/core\";\r\nimport {Invoice} from \"../models/invoice\";\r\nimport {InvoiceService} from \"../services/invoice.service\";\r\nimport {InvoiceComponent} from \"./invoice.component\";\r\nimport {ROUTER_DIRECTIVES} from \"@angular/router\";\r\n\r\n/**\r\n * Represents a list of all invoices provided\r\n * from a service. Uses dependency injection to load\r\n * our service.\r\n * @class\r\n */\r\n@Component({\r\n  selector: 'invoice-list',\r\n  templateUrl: 'templates/invoice-list.component.html',\r\n  providers: [InvoiceService],\r\n  directives: [ROUTER_DIRECTIVES,InvoiceComponent]\r\n})\r\nexport class InvoiceListComponent implements OnInit{\r\n  invoices: Invoice[];\r\n\r\n  constructor(private _invoiceService:InvoiceService) {\r\n  }\r\n\r\n  /**\r\n   * Implemented method from {@link OnInit} interface which\r\n   * is called after the constructor of the class. We use the\r\n   * provided service to load all invoices.\r\n   */\r\n  ngOnInit() {\r\n    this._invoiceService.getInvoices()\r\n                        .then(response=>this.invoices=response)\r\n                        .catch(error=>console.error(error));\r\n  }\r\n}\r\n"]}