{"version":3,"file":"invoice-form.component.js","sourceRoot":"","sources":["file:///C:/Users/Bogomil Dimitrov/WebstormProjects/PaysafeInternsInvoices/tmp/broccoli_type_script_compiler-input_base_path-yuxLTfV5.tmp/0/src/app/components/invoice-form.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAgC,eAAe,CAAC,CAAA;AAChD,wBAAsB,mBAAmB,CAAC,CAAA;AAC1C,wBAAsB,mBAAmB,CAAC,CAAA;AAC1C,qBAAmB,gBAAgB,CAAC,CAAA;AACpC,gCAA6B,6BAA6B,CAAC,CAAA;AAE3D;;;;;GAKG;AAMH;IAGE,8BAAoB,eAA+B;QAA/B,oBAAe,GAAf,eAAe,CAAgB;IACnD,CAAC;IAED;;;;;OAKG;IACH,uCAAQ,GAAR;QACE,IAAI,CAAC,iBAAiB,GAAG,iBAAO,CAAC,kBAAkB,EAAE,CAAC;IACxD,CAAC;IAED;;;;;;;;OAQG;IACH,4CAAa,GAAb,UAAc,aAAa,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI;QAClD,IAAI,CAAC,qBAAqB,CAAC,aAAa,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;QACnE,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAC1D,CAAC;IAED;;;;;;;OAOG;IACK,oDAAqB,GAA7B,UAA8B,aAAa,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI;QAClE,IAAI,CAAC,iBAAiB,CAAC,aAAa,GAAG,aAAa,CAAC;QACrD,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,iBAAO,CAAC,0BAA0B,CAAC,MAAM,CAAC,CAAC;QAC3E,IAAI,CAAC,iBAAiB,CAAC,SAAS,GAAG,iBAAO,CAAC,0BAA0B,CAAC,SAAS,CAAC,CAAC;QACjF,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,IAAI,CAAC,WAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC,CAAC;IACxE,CAAC;IAhDH;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,cAAc;YACxB,WAAW,EAAE,uCAAuC;YACpD,SAAS,EAAC,CAAC,gCAAc,CAAC;SAC3B,CAAC;;4BAAA;IA6CF,2BAAC;AAAD,CAAC,AA5CD,IA4CC;AA5CY,4BAAoB,uBA4ChC,CAAA","sourcesContent":["import {Component, OnInit} from \"@angular/core\";\nimport {Invoice} from \"../models/invoice\";\nimport {Company} from \"../models/company\";\nimport {Item} from \"../models/item\";\nimport {InvoiceService} from \"../services/invoice.service\";\n\n/**\n * Represents a form which submits new invoices\n * to the service. Uses dependency injection to load\n * our service.\n * @class\n */\n@Component({\n  selector: 'invoice-form',\n  templateUrl: 'templates/invoice-form.component.html',\n  providers:[InvoiceService]\n})\nexport class InvoiceFormComponent implements OnInit{\n  invoiceToBeStored:Invoice;\n\n  constructor(private _invoiceService: InvoiceService) {\n  }\n\n  /**\n   * Implemented method from {@link OnInit} interface which\n   * is called after the constructor of the class. We instantiate\n   * our invoiceToBeStored by an empty Invoice object which we\n   * fill from the form.\n   */\n  ngOnInit() {\n    this.invoiceToBeStored = Invoice.createEmptyInvoice();\n  }\n\n  /**\n   * EventHandler method which is called when the form Add button\n   * is clicked. It stores the updated invoiceToBeStored object by\n   * passing it to the invoice service.\n   * @param invoiceNumber string passed from the form input.\n   * @param sender anonymous object passed from the form input.\n   * @param recipient anonymous object passed from the form input.\n   * @param item anonymous object passed from the form input.\n   */\n  addNewInvoice(invoiceNumber, sender, recipient, item) {\n    this.updateInvoiceFromForm(invoiceNumber, sender, recipient, item);\n    this._invoiceService.addInvoice(this.invoiceToBeStored);\n  }\n\n  /**\n   * Updates the invoiceToBeStored object by storing the parsed form values\n   * to the appropriate fields of the Invoice object.\n   * @param invoiceNumber string\n   * @param sender anonymous object which needs to be mapped to a Company instance\n   * @param recipient anonymous object which needs to be mapped to a Company instance\n   * @param item anonymous object which needs to be mapped to an Item instance\n   */\n  private updateInvoiceFromForm(invoiceNumber, sender, recipient, item) {\n    this.invoiceToBeStored.invoiceNumber = invoiceNumber;\n    this.invoiceToBeStored.sender = Company.parseOutputObjectToCompany(sender);\n    this.invoiceToBeStored.recipient = Company.parseOutputObjectToCompany(recipient);\n    this.invoiceToBeStored.items.push(Item.parseOutputObjectToItem(item));\n  }\n}\n"]}