{"version":3,"file":"invoice-form.component.js","sourceRoot":"","sources":["file:///C:/Users/stefanterziyski/workspace/workspaceJEE/Invoices_frontend/invoices-frontend/tmp/broccoli_type_script_compiler-input_base_path-9BF65skb.tmp/0/src/app/components/invoice-form.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, OnInit} from \"@angular/core\";\r\nimport {Invoice} from \"../models/invoice\";\r\nimport {Company} from \"../models/company\";\r\nimport {Item} from \"../models/item\";\r\nimport {InvoiceService} from \"../services/invoice.service\";\r\nimport { FILE_UPLOAD_DIRECTIVES, FileUploader, FileSelectDirective } from 'ng2-file-upload';\r\n\r\n// URL for uploading a template\r\nconst UPLOAD_TEMPLATE_URL = 'http://localhost:8080/api/upload';\r\n\r\n// 3 MB\r\nconst MAX_FILE_SIZE = 3 * 1024 * 1024;\r\n\r\nconst DOCX_FILE_MIME_TYPE = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';\r\n\r\n/**\r\n * Represents a form which submits new invoices\r\n * to the service. Uses dependency injection to load\r\n * our service.\r\n * @class\r\n */\r\n@Component({\r\n  selector: 'invoice-form',\r\n  templateUrl: 'templates/invoice-form.component.html',\r\n  providers: [InvoiceService],\r\n  directives: [FILE_UPLOAD_DIRECTIVES]\r\n})\r\nexport class InvoiceFormComponent implements OnInit {\r\n  invoiceToBeStored: Invoice;\r\n  isFileSizeTooLarge: boolean;\r\n  isFileTypeInvalid: boolean;\r\n  public uploader: FileUploader;\r\n\r\n  constructor(private _invoiceService: InvoiceService) {\r\n  }\r\n\r\n  /**\r\n   * Implemented method from {@link OnInit} interface which\r\n   * is called after the constructor of the class. We instantiate\r\n   * our invoiceToBeStored by an empty Invoice object which we\r\n   * fill from the form.\r\n   */\r\n  ngOnInit() {\r\n    this.invoiceToBeStored = Invoice.createEmptyInvoice();\r\n    this.isFileSizeTooLarge = false;\r\n    this.isFileTypeInvalid = false;\r\n    this.initFileUploader();\r\n  }\r\n\r\n  /**\r\n   * Initialize the FileUploader instance (this.uploader) with basic configurations\r\n   */\r\n  private initFileUploader() {\r\n    // Instantiate a file uploader using an upload URL\r\n    // TODO: Add an authToken to the file uploader when authentication is implemented\r\n    this.uploader = new FileUploader({ url: UPLOAD_TEMPLATE_URL });\r\n\r\n    // Set constraints for file size (max 3MB) and file extension (.docx)\r\n    this.uploader.setOptions({\r\n      allowedMimeType: [DOCX_FILE_MIME_TYPE],\r\n      maxFileSize: MAX_FILE_SIZE\r\n    });\r\n\r\n    // Hook: Set the method type for uploading an item to 'POST'                          \r\n    this.uploader.onBeforeUploadItem = (fileItem: any) => {\r\n      fileItem.method = 'POST';\r\n    }\r\n\r\n    // Hook: When the user links a file, upload immediately\r\n    this.uploader.onAfterAddingFile = (fileItem: any) => {\r\n      fileItem.upload();\r\n      this.isFileSizeTooLarge = false;\r\n      this.isFileTypeInvalid = false;\r\n    }\r\n\r\n    /**\r\n     * Hook: Give feedback to the user if the file he wants to upload is invalid and doesn't meet the constraints.\r\n     * Based on the isFileSizeTooLarge and isFileTypeInvalid values different error messages are displayed in the HTML. \r\n     */\r\n    this.uploader.onWhenAddingFileFailed = (item: any, filter: any, options: any) => {\r\n      this.isFileSizeTooLarge = !this.uploader._fileSizeFilter(item);\r\n      this.isFileTypeInvalid = !this.uploader._mimeTypeFilter(item);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * EventHandler method which is called when the form Add button\r\n   * is clicked. It stores the updated invoiceToBeStored object by\r\n   * passing it to the invoice service.\r\n   * @param invoiceNumber string passed from the form input.\r\n   * @param sender anonymous object passed from the form input.\r\n   * @param recipient anonymous object passed from the form input.\r\n   * @param item anonymous object passed from the form input.\r\n   */\r\n  addNewInvoice(invoiceNumber, sender, recipient, item) {\r\n    this.updateInvoiceFromForm(invoiceNumber, sender, recipient, item);\r\n    this._invoiceService.addInvoice(this.invoiceToBeStored);\r\n  }\r\n\r\n  /**\r\n   * Updates the invoiceToBeStored object by storing the parsed form values\r\n   * to the appropriate fields of the Invoice object.\r\n   * @param invoiceNumber string\r\n   * @param sender anonymous object which needs to be mapped to a Company instance\r\n   * @param recipient anonymous object which needs to be mapped to a Company instance\r\n   * @param item anonymous object which needs to be mapped to an Item instance\r\n   */\r\n  private updateInvoiceFromForm(invoiceNumber, sender, recipient, item) {\r\n    this.invoiceToBeStored.invoiceNumber = invoiceNumber;\r\n    this.invoiceToBeStored.sender = Company.parseOutputObjectToCompany(sender);\r\n    this.invoiceToBeStored.recipient = Company.parseOutputObjectToCompany(recipient);\r\n    this.invoiceToBeStored.items.push(Item.parseOutputObjectToItem(item));\r\n  }\r\n}\r\n"]}