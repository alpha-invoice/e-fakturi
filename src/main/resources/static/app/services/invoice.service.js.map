{"version":3,"file":"invoice.service.js","sourceRoot":"","sources":["file:///C:/Users/Bogomil Dimitrov/WebstormProjects/PaysafeInternsInvoices/tmp/broccoli_type_script_compiler-input_base_path-yuxLTfV5.tmp/0/src/app/services/invoice.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA8B,eAAe,CAAC,CAAA;AAC9C,qBAAwD,eAAe,CAAC,CAAA;AACxE,wBAA2B,mBAAmB,CAAC,CAAA;AAC/C,QAAO,6BAA6B,CAAC,CAAA;AACrC,QAAO,qBAAqB,CAAC,CAAA;AAC7B,wBAAsB,mBAAmB,CAAC,CAAA;AAC1C,qBAAmB,gBAAgB,CAAC,CAAA;AAGpC;;;;;GAKG;AAEH;IAGI,wBAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAFtB,eAAU,GAAG,WAAW,CAAC;IAEC,CAAC;IAEnC;;;OAGG;IACH,mCAAU,GAAV,UAAW,UAAmB;QAC1B,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QACtC,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,CAAC;QAClE,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QACvD,MAAM,CAAC,IAAI,CAAC,IAAI;aACX,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,OAAO,CAAC;aACrC,SAAS,EAAE,CAAC;IACrB,CAAC;IAEH;;;;;OAKG;IACH,8CAA8C;IAC9C,oCAAW,GAAX;QACM,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC;aAClC,GAAG,CAAC,UAAC,GAAG,IAAK,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;aACxB,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,UAAA,CAAC;YAC3B,IAAI,aAAa,GAAG,iBAAO,CAAC,yBAAyB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;YAChE,IAAI,gBAAgB,GAAG,iBAAO,CAAC,yBAAyB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;YACtE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,CAAC,IAAG,OAAA,WAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC,EAA9B,CAA8B,CAAC,CAAC;YAChD,MAAM,CAAC,IAAI,iBAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,aAAa,EAAE,aAAa,EAAE,gBAAgB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;QACtF,CAAC,CAAC,EALc,CAKd,CAAC;aACF,SAAS,EAAE,CAAC;IACnB,CAAC;IApCL;QAAC,iBAAU,EAAE;;sBAAA;IAsCb,qBAAC;AAAD,CAAC,AArCD,IAqCC;AArCY,sBAAc,iBAqC1B,CAAA","sourcesContent":["import { Injectable }    from '@angular/core';\nimport { Headers, Http, Response, RequestOptions } from '@angular/http';\nimport { Invoice }    from '../models/invoice';\nimport 'rxjs/add/operator/toPromise';\nimport 'app/rxjs-extensions';\nimport {Company} from \"../models/company\";\nimport {Item} from \"../models/item\";\nimport {Observable} from \"rxjs/Rx\";\n\n/**\n * Represents an Invoice service class.\n * It handles all HTTP requests to the business layer\n * in order to store/retrieve Invoice objects.\n * @class\n */\n@Injectable()\nexport class InvoiceService {\n    private serviceUrl = '/invoices';\n\n    constructor(private http: Http) { }\n\n    /**\n     * Stores a new Invoice to the database.\n     * @return a Promise of the request\n     */\n    addInvoice(newInvoice: Invoice): Promise<Response> {\n        let body = JSON.stringify(newInvoice);\n        let headers = new Headers({ 'Content-Type': 'application/json' });\n        let options = new RequestOptions({ headers: headers });\n        return this.http\n            .patch(this.serviceUrl, body, options)\n            .toPromise();\n    }\n\n  /**\n   * Retrieves all invoices stored in the database by\n   * mapping the resulting string to a js object and\n   * returning TypeScript instantiated classes.\n   * @returns a Promise which holds all the invoices\n   */\n  //TODO: should retrieve user specific invoices\n  getInvoices(): Promise<Invoice[]> {\n        return this.http.get(this.serviceUrl)\n          .map((res) => res.json())\n          .map(invoice => invoice.map(i => {\n            var senderCompany = Company.parseInputObjectToCompany(i.sender);\n            var recipientCompany = Company.parseInputObjectToCompany(i.recipient);\n            i.items.map(i=> Item.parseInputObjectToItem(i));\n            return new Invoice(i.id, i.invoiceNumber, senderCompany, recipientCompany, i.items);\n          }))\n          .toPromise();\n    }\n\n}\n"]}